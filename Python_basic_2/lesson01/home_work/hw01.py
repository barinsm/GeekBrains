# Урок 1. Введение в алгоритмизацию и реализация простых алгоритмов на Python

# 1. Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.

n = input('Введите трехзначное число: ')
sum_n = int(n[0]) + int(n[1]) + int(n[2])
pro_n = int(n[0]) * int(n[1]) * int(n[2])
print('Сумма цифр числа: ', sum_n)
print('Произведение цифр числа: ', pro_n)

# 2. Выполнить логические побитовые операции «И», «ИЛИ» и др. над числами 5 и 6. Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака. Объяснить полученный результат.

a = 5
b = 6
print('Результат побитовой операции "И" над A и B: ', a & b ) # получится 4, т.к. после побитового умножения 101 и 110 получаем 100
print('Результат побитовой операции "ИЛИ" над A и B: ', a | b ) # получится 7, т.к. после побитового сложения 101 и 110 получаем 111
print('Результат побитовой операции "Исключительное ИЛИ" над A и B: ', a ^ b ) # получится 3, т.к. после побитового исключительного сложения 101 и 110 получаем 011 
print('Результат побитовой операции "НЕ" над A: ', ~a ) # получится -6, т.к. после побитового отрицания 00000101 получаем 11110010
print('Результат побитовой операции "НЕ" над B: ', ~b ) # получится -7, т.к. после побитового отрицания 00000110 получаем 11111001
print('Результат побитовой операции сдвиг вправо над A: ', a>>2 ) # получится 1, т.к. после побитового сдвига вправо на 2 бита в 00000101 получаем 00000001
print('Результат побитовой операции сдвиг вправо над B: ', b>>2 ) # получится 1, т.к. после побитового сдвига вправо на 2 бита в 00000110 получаем 00000001
print('Результат побитовой операции сдвиг влево над A: ', a<<2 ) # получится 20, т.к. после побитового сдвига влево на 2 бита в 00000101 получаем 00010100
print('Результат побитовой операции сдвиг влево над B: ', b<<2 ) # получится 24, т.к. после побитового сдвига влево на 2 бита в 00000110 получаем 00011000

# 3. По введенным пользователем координатам двух точек вывести уравнение прямой вида y=kx+b, проходящей через эти точки.

# 4. Написать программу, которая генерирует в указанных пользователем границах:
# случайное целое число;
# случайное вещественное число;
# случайный символ.
# Для каждого из трех случаев пользователь задает свои границы диапазона. Например, если надо получить случайный символ от 'a' до 'f', то вводятся эти символы. Программа должна вывести на экран любой символ алфавита от 'a' до 'f' включительно.

# 5. Пользователь вводит две буквы. Определить, на каких местах алфавита они стоят и сколько между ними находится букв.

# 6. Пользователь вводит номер буквы в алфавите. Определить, какая это буква.

# 7. По длинам трех отрезков, введенных пользователем, определить возможность существования треугольника, составленного из этих отрезков. Если такой треугольник существует, то определить, является ли он разносторонним, равнобедренным или равносторонним.

# 8. Определить, является ли год, который ввел пользователем, високосным или невисокосным.

# 9. Вводятся три разных числа. Найти, какое из них является средним (больше одного, но меньше другого).
